Cmdline (non-upgrade tasks)
   |
  \ /
Generators
   |
  \ /
If .corvid/version exists, make sure up-to-date
Recreate latest ver of templates
   |
  \ /
Copy whats needed
Make empty directories
Chmod
   |
  \ /
Create/update .corvid/version
Create/update .corvid/filelist

----------------------------

Cmdline (upgrade tasks)
   |
  \ /
Upgrade-Generator
   |
  \ /
Read .corvid/filelist
Read .corvid/version
Upgrade each file
(?) Rename files
(?) Chmod <-- should have a corvid_migration-chmod.yml
(?) Empty directories

----------------------------

Scenarios:
* Add new file
* Update file
* Delete file
* Create empty directory
* Change file permissions
? Rename file
*** All of above but only if unit tests are enabled

----------------------------

New project
* Add feature 'corvid'
* Upgrade 'corvid' 0->n
Add feature (when at latest)
* Add feature 'test_unit'
* Upgrade 'test_unit' 0->n
Add feature (when not at latest)
* Add feature 'test_unit'
* Upgrade 'test_unit' 0->m where m=version of currently installed features
Upgrade
* Upgrade all installed features from m->n

NEED IS:
* Ability to upgrade a feature
* Features need:
** Specify files
** Upgrades like in [scenarios]

SOLUTION:
* Features stored in .corvid/features.yml
* Version specified in .corvid/version.yml
* Code like in generators stored in templated corvid_migration-{feature}.rb which defines (void*)(version)
* Upgrading existing features: migrate each feature from m->n
* Adding new features: add to features.yml, migrate from 0->m
* When exploding, apply patch for 0-n then apply n-1, n-2, etc.

resources/
  00001.patch  <-- res patch
  latest/      <-- exploded, excluded from gem

rak res:package - Create new patch based on changes in resources/latest
rak res:reset   - Restore resources/latest to latest patch
rak res:diff    - Diff latest res patch with resources/latest

----------------------------

Needed:
  Latest version of templates
  Previous few versions

v1)
	Latest - patch of everything against nothing (A)

v2)
	Latest - patch of everything against nothing (B)
	n-1 - patch to downgrade from B to A (A)

v3)
	Latest - patch of everything against nothing (C)
	n-1 - patch to downgrade from C to B (B)
	n-2 - patch to downgrade from B to A (A)

Creation Process:
* Patch latest against nothing
* Create a downgrade patch for n-1 (unless n=1)

Application Process:
* Apply patches [latest] to [n] in descending order.
