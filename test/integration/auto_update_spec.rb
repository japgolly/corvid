# encoding: utf-8
require_relative '../bootstrap/integration'

describe 'Auto-Update Functionality' do

  def_fixture :auto_update_plugin_and_client do
    copy_dynamic_fixture :plugin

    add_templates_to_plugin

    deploy_templates_to_client

    modify_plugin_templates

    update_templates_in_client
  end

  def add_templates_to_plugin
    Dir.chdir('plugin_project') {
      # Expand resources
      invoke_rake! 'res:latest'

      # plugin has feature with templates that use %project_name%
      File.write 'resources/latest/mock-%project_name%.txt.tt', <<-EOB
        Gem::Specification.new do |gem|
          gem.name        = "<%= project_name %>"
          gem.version     = <%= project_module %>::VERSION.dup
          # LATER
        end
      EOB
      File.write 'resources/latest/corvid-features/f1.rb', 'install{ template2 "mock-%project_name%.txt.tt" }'

      # plugin has new:xxx task that generates lib/%project_name%/%plugin_name%.rb
      FileUtils.mkdir_p 'resources/latest/lib/%project_name%'
      File.write 'resources/latest/lib/%project_name%/mock-%plugin_name%_plugin.rb.tt', <<-EOB
        module <%= project_module %>
          class <%= class_name %> < Corvid::Plugin

            # The name of the plugin.
            #
            # @return [String] The plugin name.
            name '<%= plugin_name %>'

            # LATER

          end
        end
      EOB
      File.write 'lib/plugin_project/t2_task.rb', %q~
        require 'corvid/generator/base'

        class T2Task < ::Corvid::Generator::Base
          namespace 'p1'

          argument :name, type: :string

          desc 'go_dude', 'Dude. Go.'
          def go_dude
            with_latest_resources(plugin_registry['p1']) {
              with_auto_update_details(require: __FILE__) {
                template2_au 'lib/%project_name%/mock-%plugin_name%_plugin.rb.tt'
              }
            }
          end

          # Template vars
          private
          def plugin_name; name.underscore.gsub(/^.*[\/]+|\.rb$/,'').sub(/_plugin$/,'') end
          def require_path; "#{project_name}/#{plugin_name}_plugin" end
          def class_name; plugin_name.camelize + 'Plugin' end
          def full_class_name; "#{project_module}::#{class_name}" end
        end
      ~
      invoke_rake! 'res:redo'
      #debug_view_dir find: '-type f', pipe: 'egrep "/lib/|/resources/"', title: 'After: add_templates_to_plugin'
    }
  end

  def modify_plugin_templates
    Dir.chdir('plugin_project') {
      gsub_file! /(?<=\n)[^\n]+?LATER.*?(?=\n)/, "AWESOME UPDATE TO <%= project_name %>!" \
        , 'resources/latest/lib/%project_name%/mock-%plugin_name%_plugin.rb.tt' \
        , 'resources/latest/mock-%project_name%.txt.tt'
      invoke_rake! 'res:new'
      #debug_view_dir find: '-type f', pipe: 'egrep "/lib/|/resources/"', title: 'After: modify_plugin_templates'
    }
  end

  def deploy_templates_to_client
    Dir.chdir('client_project') {
      invoke_corvid! %(
        p1:install:f1
        p1:go_dude abc
        p1:go_dude def
      )
      #debug_view_dir find: '-type f', pipe: 'egrep "/.corvid/|mock-"', title: 'After: deploy_templates_to_client'
      'mock-client_project.txt'.should               be_file_with_content /gem.name.*=.*"client_project"/
      'lib/client_project/mock-abc_plugin.rb'.should be_file_with_content /name 'abc'/, /module ClientProject/
      'lib/client_project/mock-def_plugin.rb'.should be_file_with_content /name 'def'/, /module ClientProject/
    }
  end

  def update_templates_in_client
    Dir.chdir('client_project') {
      #puts '_'*100; system 'cat .corvid/auto_update.yml'; puts '_'*100
      #@quiet_sh= false
      invoke_corvid! 'update:p1'
    }
  end

  #---------------------------------------------------------------------------------------------------------------------

  run_all_in_dynamic_fixture :auto_update_plugin_and_client, cd_into: 'client_project'

  it("Templates generated as part of a feature, update correctly"){
    'mock-client_project.txt'.should be_file_with_content(/AWESOME UPDATE TO client_project!/)
      .and(/gem.name.*=.*"client_project"/)
      .and_not(/LATER/)
  }

  it("Templates generated by manual tasks, update correctly"){
    'lib/client_project/mock-abc_plugin.rb'.should be_file_with_content(/AWESOME UPDATE TO client_project!/)
      .and(/name 'abc'/, /module ClientProject/)
      .and_not(/LATER/)
    'lib/client_project/mock-def_plugin.rb'.should be_file_with_content(/AWESOME UPDATE TO client_project!/)
      .and(/name 'def'/, /module ClientProject/)
      .and_not(/LATER/)
  }
end
